package com.revature.challenges.problem_2;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

/*
    Problem Description:

        Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting
        with 1 and 2, the first 10 terms will be:

            1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

        By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the
        sum of the even-valued terms up to index "n" of the sequence.

        Constraints:

            1 < n <= 91

 */
public class ProblemTwo {

    public long sumEvenFibNumbers(int exclusiveEnd) {
        int c = 0;
        int d = 1;
        int e;
        int p;
        List<Integer> list = new ArrayList<>();
        for(int i = 1; i<=exclusiveEnd; i++){
            e=c;
            c=d;
            d+=e;
            list.add(d);
        }
        List<Integer> evenList = list.stream()
                .filter(k -> k%2 == 0)
                .collect(Collectors.toList());
        p = evenList.stream().mapToInt(j -> j).sum();
        return p;
    }
}
