package com.revature.challenges.problem_2;

import java.util.stream.IntStream;

/*
    Problem Description:

        Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting
        with 1 and 2, the first 10 terms will be:

            1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

        By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the
        sum of the even-valued terms up to index "n" of the sequence.

        Constraints:

            1 < n <= 91

 */
public class ProblemTwo {

    // shut up, I know how inefficient it is
    // dude just trust me, it works <-<
    public long sumEvenFibNumbers(int exclusiveEnd) {
        long fiboTotal = 0;
        for (int i=0; i<exclusiveEnd; i++) {
            long currentFibo = fibonacciCalc(i);
            if (currentFibo%2 == 0) {
                fiboTotal += currentFibo;
            }
        }
        return fiboTotal;
    }

    public long fibonacciCalc(int index) {
        if((index == 0) || (index == 1)) {
            return index;
        } else {
            return fibonacciCalc(index-1) + fibonacciCalc(index -2);
        }
    }
}
